'''
    @Time : 2020/5/26 14:52 
    @Author : Mao Yuhuan
    @FileName : 3.2 数字类型的操作
    @Software: PyCharm
'''

# 基本规则:
# 整数之间进行运算 如果数学意义上是小数 则结果为浮点数
# 整数之间进行运算 如果数学意义上是整数 则结果为整数
# 整数和浮点数进行混合运算 输出结果为浮点数
# 整数或浮点数与复数进行计算 输出结果为复数

print(100 / 3)  # 存在精度丢失现象
print(100 // 3)  # 整除 结果为整数
print(123 + 0.3)  # 结果为浮点数
print(10.0 + 3 + 2j)  # 结果为复数

x = 3
x += 2  # 类似的还有 -= *= /= **= (**=为次方之后赋值)
print(x)

# python中的内置运算函数
print(abs(-3.5))  # 取绝对值
print(abs(3 + 4j))  # 复数绝对值 5.0
print(divmod(13, 2))  # 二元组形式进行输出 (x//y, x%y)
print(pow(2, 10))  # 作用和2**10一样
print(round(3.565699, 3))  # 四舍五入 第二个参数可以省略 默认为0
print(max(3.2, 5.6, 3.3, 0.3, 6.6))  # 求最大值 参数可以有多个 最小值 min(arg1, arg2 ...)

# pow() 函数的第三个参数
# 在pow函数中 第一个参数为底数 第二个参数为指数 第三个参数为取模(可选)
# pow(3, pow(3, 99), 1000) 和 pow(3, pow(3, 99)) % 1000 效果一样 但是后者会造成问题(应该很大)
print(pow(3, pow(3, 99), 10000))

# 数字转换函数
print(int(3.2))
print(float(1 + 2 + 66))
# k = float(10+66j)
# print(k)        # 有问题 无法转换 (书上例子说会报错但是我并没有遇到这个情况 直接就是没有输出)
print(float((10 + 66j).imag))
