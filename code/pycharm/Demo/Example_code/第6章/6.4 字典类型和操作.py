# -*- coding: utf-8 -*-
# @Time : 2020/7/4 23:10
# @Author : MYH
# @File : 6.4 字典类型和操作.py
# @Software: PyCharm

# 字典中,键值对中间使用':'进行分割,两个键值对之间使用','进行分割
# 通过任意键信息查找一组数据中值的信息的过程叫做映射
# 因为表示方法和集合类似 都是用花括号进行包括 可以认为是元素是键值对的集合

Country = {"中国": "北京", "美国": "华盛顿", "法国": "巴黎"}
print(Country)
print(Country["美国"])  # 通过键找到对应的值
Country["美国"] = "纽约"  # 进行值的修改
print(Country)
Country["巴西"] = "巴西利亚"  # 方便的是可以通过这样的方式进行字典键值对的创建
print(Country)

# Python的字典是存储可变键值对的数据结构 可以存储任何类型,包括程序自定义的数据类型 而且存储量大,效率高
# 索引是按照一定的顺序检索内容的一个体系 主要包括了: 数字索引(位置索引)和字符索引(单词索引)  在Python中,字符串/列表/元组等采用数字索引,字典采用字符索引

# Dp = {}  # 直接通过一个{} 就可以创建一个空的字典 生成一个空集合需要用到set() 直接这样写是创建一个字典 PYCHARM会报警告  因为可以简便使用下面这种方法
# Dp["2^10"] = 1024
Dp = {"2^10": 1024, "2^3": 8, "2^4": 16}
print(Dp)

# python内部也已经采用了面向对象的方式进行实现,因此可以采用<a>.<b>()的格式,
# 字典类型操作的函数和方法
# print(Dp.keys())  # 返回所有的键信息
# print(Dp.values())  # 返回所有的值信息
# print(Dp.items())  # 返回所有的键值对
# print(Dp.get("2^6", 32))  # 查询是否有对应的键,如果没有则返回32默认值
# print(Dp.pop("2^10", 111))  # 寻找并通过键名取出一个=键值对并删除原键值对,否则返回111默认值
# print(Dp.popitem())  # 随机取出一个键值对 以元组的形式返回
# Dp.clear()  # 删除字典中的所有键值对
# del Dp["key"]  # 删除字典中的某一个键值对
# < key > in < Dp >  # 如果key在Dp字典中则返回True 否则返回False

# 同时可以进行对字典的遍历
for name in Dp:
    print(name, end='  ')
